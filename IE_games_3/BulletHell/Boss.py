import pygame, randomfrom Constants import *import FallingRock, FastFireimport Enemy#head hitbox doesn't move during wall bangingclass Boss(Enemy.Enemy):	def __init__(self):		Enemy.Enemy.__init__(self, "boss")		self.sheet = boss_sheet		self.image = self.sheet[0]		self.rect = self.image.get_rect()		self.rect.topleft = ((400, resolution[1]))		self.loc = [self.rect.left, self.rect.top]		self.points = 100		self.dying = False		self.mouth = 180		self.stage = 0		self.nextstage = 300		self.invincible = False		self.got_rushed = False		self.max_health = 1000		self.health = 1000		self.firetype = 0		self.fire_rate = 30		self.fired = 0		self.fire_length = 120		self.currentshot = 0		self.wallcount = 0		self.state = "enter"		self.laststate = ""		self.frame_id = 0		self.frame_time = self.rect.height		self.idlewait = False		self.shake_screen = True	def activate(self, game):		self.max_health += (game.total_time / 60)		self.health += (game.total_time / 60)		self.state = "enter"		self.stage = (game.total_time / 60) / 80	def checkcollision(self, game, bullet, rushed, light):		head = pygame.Rect(self.rect.left + 126, self.rect.top + 30, 110, 220)		shoulders = pygame.Rect(self.rect.left + 15, self.rect.top + 255, 330, 30)		if bullet.rect.colliderect(head) or bullet.rect.colliderect(shoulders):			self.take_damage(game, bullet.damage, rushed, light)			return True		return False	def take_damage(self, game, num, rushed = False, light = False):		if self.invincible or self.got_rushed:			return		x = num		if not light:			x *= .5		if rushed:			x *= 16		if not light and not rushed:			x *= (7 - (game.player.weapon / 2)) * .125		self.got_rushed = rushed		self.health -= x		self.nextstage -= x		if self.health <= 0:			self.die(game)			return		if self.nextstage <= 0:			self.nextstage += 300			self.stage += 1	def die(self, game):		self.dying = True		self.shake_screen = True		game.wingame = True	def newaction(self):		if self.state != "idle":			self.laststate = self.state		a = -1		self.idlewait = False		while a == -1 or (self.laststate == self.state and self.state != "idle"):			a = random.randint(0,11)			if a < 4 and not self.invincible:				if self.state == "idle":					self.idlewait = True				self.state = "idle"			elif a > 3 and (a < 7 and self.laststate != "wallleft") or a < 10 and (self.laststate == "wallright"):				self.state = "left"				self.frame_time = random.randint(100,300)			elif a > 3 and a < 10 and self.laststate != "wallright":				self.state = "right"				self.frame_time = random.randint(100,300)			elif self.laststate != "enter" and self.laststate != "dive":				if self.invincible:					self.state = "enter"					self.invincible = False					self.frame_time = (self.rect.height - 100) / 2				else:					self.state = "dive"					self.frame_time = (self.rect.height - 100) / 2				self.shake_screen = True		if not self.canshoot():			self.fired = 0			self.firetype = 0	def canshoot(self):		return not self.invincible and self.state in ["idle", "left", "right", "other"]	def startshooting(self):		self.firetype = random.randint(1, self.stage + 3) * (1 if random.randint(0,3) else 0)	def fire(self, game):		mloc = (self.rect.centerx, self.rect.top + self.mouth)		if self.firetype == 1:			if self.fired % 30 == 0:				game.bullets.append(FastFire.FastFire(mloc, 0))				game.bullets.append(FastFire.FastFire(mloc, 10, -5, -1))				game.bullets.append(FastFire.FastFire(mloc, 10, -6, 0))				game.bullets.append(FastFire.FastFire(mloc, 10, -5, 1))				game.bullets.append(FastFire.FastFire(mloc, 10, 5, -1))				game.bullets.append(FastFire.FastFire(mloc, 10, 6, 0))				game.bullets.append(FastFire.FastFire(mloc, 10, 5, 1))			if self.fired % 40 == 0:				game.bullets.append(FastFire.FastFire(mloc, 1))				game.bullets.append(FastFire.FastFire(mloc, 2))			if self.fired % 60 == 0:				game.bullets.append(FastFire.FastFire(mloc, 3, -2, -7))				game.bullets.append(FastFire.FastFire(mloc, 4, 2, -7))		elif self.firetype == 2:			if self.fired % 30 == 0:				game.bullets.append(FastFire.FastFire(mloc, 0))				game.bullets.append(FastFire.FastFire(mloc, 1))				game.bullets.append(FastFire.FastFire(mloc, 2))				game.bullets.append(FastFire.FastFire(mloc, 10, -5, -1))				game.bullets.append(FastFire.FastFire(mloc, 10, -6, 0))				game.bullets.append(FastFire.FastFire(mloc, 10, -5, 1))				game.bullets.append(FastFire.FastFire(mloc, 10, 5, -1))				game.bullets.append(FastFire.FastFire(mloc, 10, 6, 0))				game.bullets.append(FastFire.FastFire(mloc, 10, 5, 1))			if self.fired % 45 == 0:				game.bullets.append(FastFire.FastFire(mloc, 3, -2, -7))				game.bullets.append(FastFire.FastFire(mloc, 4, 2, -7))		elif self.firetype == 3:			if self.fired % 20 == 0:				game.bullets.append(FastFire.FastFire(mloc, 0))			if self.fired % 60 == 20 or self.fired % 60 == 40:				game.bullets.append(FastFire.FastFire(mloc, 3, -2, -7))				game.bullets.append(FastFire.FastFire(mloc, 4, 2, -7))				game.bullets.append(FastFire.FastFire(mloc, 10, -5, -1))				game.bullets.append(FastFire.FastFire(mloc, 10, -6, 0))				game.bullets.append(FastFire.FastFire(mloc, 10, -5, 1))				game.bullets.append(FastFire.FastFire(mloc, 10, 5, -1))				game.bullets.append(FastFire.FastFire(mloc, 10, 6, 0))				game.bullets.append(FastFire.FastFire(mloc, 10, 5, 1))		elif self.firetype == 4:			if self.fired % 20 == 0:				game.bullets.append(FastFire.FastFire(mloc, 0))			if self.fired % 30 == 0:				game.bullets.append(FastFire.FastFire(mloc, 0, -1, -4))				game.bullets.append(FastFire.FastFire(mloc, 0, 1, -4))				game.bullets.append(FastFire.FastFire(mloc, 10, -5, -1))				game.bullets.append(FastFire.FastFire(mloc, 10, -6, 0))				game.bullets.append(FastFire.FastFire(mloc, 10, -5, 1))				game.bullets.append(FastFire.FastFire(mloc, 10, 5, -1))				game.bullets.append(FastFire.FastFire(mloc, 10, 6, 0))				game.bullets.append(FastFire.FastFire(mloc, 10, 5, 1))		elif self.firetype == 5:			if self.fired % 60 == 10 or self.fired % 60 == 30:				game.bullets.append(FastFire.FastFire(mloc, 0, 0, -4))			if self.fired % 60 == 20 or self.fired % 60 == 40:				game.bullets.append(FastFire.FastFire(mloc, 0, -2, -2))				game.bullets.append(FastFire.FastFire(mloc, 0, 2, -2))			if self.fired % 60 == 30 or self.fired % 60 == 50:				game.bullets.append(FastFire.FastFire(mloc, 0, -3, -2))				game.bullets.append(FastFire.FastFire(mloc, 0, 3, -2))				game.bullets.append(FastFire.FastFire(mloc, 0, -4, 0))				game.bullets.append(FastFire.FastFire(mloc, 0, 4, 0))		elif self.firetype >= 6:			if self.fired % 60 == 10:				game.bullets.append(FastFire.FastFire(mloc, 0, -4, -4))				game.bullets.append(FastFire.FastFire(mloc, 0, 4, -4))			if self.fired % 60 == 15:				game.bullets.append(FastFire.FastFire(mloc, 0, -3, -5))				game.bullets.append(FastFire.FastFire(mloc, 0, 3, -5))			if self.fired % 60 == 20:				game.bullets.append(FastFire.FastFire(mloc, 0, -2, -6))				game.bullets.append(FastFire.FastFire(mloc, 0, 2, -6))			if self.fired % 60 == 25:				game.bullets.append(FastFire.FastFire(mloc, 0, -1, -7))				game.bullets.append(FastFire.FastFire(mloc, 0, 1, -7))			if self.fired % 60 == 30:				game.bullets.append(FastFire.FastFire(mloc, 0, 0, -8))				game.bullets.append(FastFire.FastFire(mloc, 0, 1, -8))				game.bullets.append(FastFire.FastFire(mloc, 0, -1, -8))			if self.fired % 60 == 35:				game.bullets.append(FastFire.FastFire(mloc, 0, 1, -7))				game.bullets.append(FastFire.FastFire(mloc, 0, -1, -7))			if self.fired % 60 == 40:				game.bullets.append(FastFire.FastFire(mloc, 0, 2, -6))				game.bullets.append(FastFire.FastFire(mloc, 0, -2, -6))			if self.fired % 60 == 45:				game.bullets.append(FastFire.FastFire(mloc, 0, 3, -5))				game.bullets.append(FastFire.FastFire(mloc, 0, -3, -5))			if self.fired % 60 == 50:				game.bullets.append(FastFire.FastFire(mloc, 0, 4, -4))				game.bullets.append(FastFire.FastFire(mloc, 0, -4, -4))	def rocks(self, game):		if self.wallcount < 200 and self.wallcount % 20 == 0:			game.enemies.append(FallingRock.FallingRock(random.randint((resolution[0] - playarea[0]) / 2, resolution[0] - (resolution[0] - playarea[0]) / 2 - images["fallingrock"].get_width())))	def update(self, game):		if game.time_stopped:			return		elif self.dying:			#animate			return		if self.got_rushed:			self.got_rushed = game.player.rushing or game.player.rising		#timers and state changing		self.frame_time -= 1		if self.frame_time <= 0:			self.frame_time = 0			self.shake_screen = False			if self.state == "enter":				self.invincible = False			elif self.state == "dive":				self.invincible = True			self.newaction()		if self.state == "enter" and self.rect.bottom <= resolution[1]:			self.state = "idle"			self.firetype = 1			self.fired = 0			self.shake_screen = False			self.frame_time = 120		elif self.state == "idle" and self.idlewait:			if not random.randint(0,100):				self.idlewait = False				self.newaction()		#determine movement		xvel = 0		yvel = 0		if self.state == "enter":			yvel = -2		elif self.state == "left":			xvel = -1		elif self.state == "right":			xvel = 1		elif self.state == "dive":			yvel = 2		#x move		self.loc[0] += xvel		self.rect.left = self.loc[0]		if self.rect.left < resolution[0]/2 - playarea[0]/2:			self.rect.left = resolution[0]/2 - playarea[0]/2			self.state = "wallleft"			self.wallcount = 300			self.frame_time = 200			self.shake_screen = True			self.firetype = 0			self.fired = 0		if self.rect.right > resolution[0]/2 + playarea[0]/2:			self.rect.right = resolution[0]/2 + playarea[0]/2			self.state = "wallright"			self.wallcount = 300			self.frame_time = 200			self.shake_screen = True			self.firetype = 0			self.fired = 0		if 1:			self.loc = [self.rect.left, self.rect.top]		#y move		self.loc[1] += yvel		self.rect.top = self.loc[1]		if 1:			self.loc = [self.rect.left, self.rect.top]		#other update, shooting		if self.firetype == 0 and not random.randint(0,20) and self.canshoot():			self.startshooting()		elif self.fired > self.fire_length:			self.startshooting()			self.fired = 0		if self.firetype > 0:			self.fired += 1			self.fire(game)		else:			self.fired = 0		if self.wallcount > 0:			self.wallcount -= 1			self.rocks(game)		if self.firetype > 0:			self.frame_id = 1		elif self.wallcount > 290 or (self.wallcount > 100 and self.wallcount <= 110):			self.frame_id = 2		elif self.wallcount > 280 or (self.wallcount > 110 and self.wallcount <= 120):			self.frame_id = 3		elif self.wallcount > 120:			self.frame_id = 4		else:			self.frame_id = 0	def draw(self, camsurf):		if self.state == "wallleft":			camsurf.blit(pygame.transform.flip(self.sheet[self.frame_id], True, False), self.loc)		else:			camsurf.blit(self.sheet[self.frame_id], self.loc)						# head = pygame.Rect(self.rect.left + 126, self.rect.top + 30, 110, 220)		# shoulders = pygame.Rect(self.rect.left + 15, self.rect.top + 255, 330, 30)		# surf1 = pygame.Surface((110,220))		# surf2 = pygame.Surface((330,30))		# camsurf.blit(surf1, head)		# camsurf.blit(surf2, shoulders)